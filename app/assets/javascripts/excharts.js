// Generated by CoffeeScript 1.10.0
(function() {
  $(document).on('turbolinks:load', function() {
    var Bar_forwarding, Base64toBlob, allcard, allcards, array, bar_width, base, base64, blob, canvas, changed, cleaned_data, ctx, d1, d2, data1, data1_color, data2, data2_color, data_length, element, fileName, i, imageType, j, k, label, max_bar_width, myChart, new_data1, new_data2, options, original_data1, original_data2, path_id, patterns, progress, ref, ref1, reverse, roop, setCardheight, setNext, single_span;
    if ($("body").hasClass("index")) {
      $(document).on('click', '.js-trigger-modal-select-mode', function() {
        $("#select_mode").modal();
        return false;
      });
    }
    if ($("body").hasClass("excharts new")) {
      setCardheight = function() {
        var card_height;
        card_height = $(".js-swiping-card").height();
        return $(".card-stack").css("height", card_height + 15);
      };
      setTimeout(function() {
        return setCardheight();
      }, 50);
      if ($("#exchart_data1").val() !== "") {
        progress = Object.keys(JSON.parse($("#exchart_data1").val())).length;
      } else {
        progress = 0;
      }
      allcard = $(".card").length - progress;
      allcards = $(".card").length;
      single_span = ($(".progressbar-outline").width() - 24) / allcards;
      max_bar_width = $(".progressbar-outline").width() - 2;
      bar_width = $(".js-trigger-bar").width();
      element = document.getElementById('card' + allcard);
      if ($("#exchart_data1").val() !== "") {
        new_data1 = JSON.parse($("#exchart_data1").val());
        new_data2 = JSON.parse($("#exchart_data2").val());
      } else {
        new_data1 = {};
        new_data2 = {};
      }
      setNext = function(id) {
        return element = document.getElementById('card' + id);
      };
      Bar_forwarding = function() {
        bar_width = 24 + single_span * (allcards - allcard + 1);
        return $(".js-trigger-bar").css("width", bar_width);
      };
      roop = function(direction) {
        var pattern_no;
        if (direction === "right") {
          $("#card" + allcard).css('transform', 'translate(105vw, 0) rotate(-5deg)');
          pattern_no = $("#card" + allcard).attr('pattern_no');
          if (pattern_no !== void 0) {
            new_data1[pattern_no] = 1;
            $("#exchart_data1").val(JSON.stringify(new_data1));
            new_data2[pattern_no] = 1;
            $("#exchart_data2").val(JSON.stringify(new_data2));
          }
        } else if (direction === "left") {
          $("#card" + allcard).css('transform', 'translate(-105vw, 0) rotate(5deg)');
          pattern_no = $("#card" + allcard).attr('pattern_no');
          if (pattern_no !== void 0) {
            new_data1[pattern_no] = 0;
            $("#exchart_data1").val(JSON.stringify(new_data1));
            new_data2[pattern_no] = 0;
            $("#exchart_data2").val(JSON.stringify(new_data2));
          }
        } else if (direction === "up") {
          $("#card" + allcard).css('transform', 'translate(0, -155vw) rotate(-5deg)');
          pattern_no = $("#card" + allcard).attr('pattern_no');
          if (pattern_no !== void 0) {
            new_data1[pattern_no] = 0;
            $("#exchart_data1").val(JSON.stringify(new_data1));
            new_data2[pattern_no] = 1;
            $("#exchart_data2").val(JSON.stringify(new_data2));
          }
        }
        Bar_forwarding();
        allcard = allcard - 1;
        if (allcard !== 0) {
          setNext(allcard);
          return base();
        } else {
          $(".flick-controller").css("display", "none");
          return $("input[type='submit']").css("display", "block");
        }
      };
      base = function() {
        var hammertime;
        hammertime = new Hammer(element);
        hammertime.get('swipe').set({
          direction: Hammer.DIRECTION_ALL,
          threshold: 1,
          velocity: 0.1
        });
        hammertime.on('swipeleft', function() {
          return roop("left");
        });
        hammertime.on('swiperight', function() {
          return roop("right");
        });
        return hammertime.on('swipeup', function() {
          return roop("up");
        });
      };
      $(document).on('click', '.flick-button.left', function() {
        roop("left");
        return false;
      });
      $(document).on('click', '.flick-button.right', function() {
        roop("right");
        return false;
      });
      $(document).on('click', '.flick-button.up', function() {
        roop("up");
        return false;
      });
      base();
      reverse = function() {
        if (allcard < allcards) {
          allcard += 1;
          $("#card" + allcard).css('transform', 'translate(0, 0) rotate(0)');
          bar_width = bar_width - single_span;
          return $(".js-trigger-bar").css("width", bar_width);
        }
      };
      $(document).on('click', '.flick-button.reverse', function() {
        return reverse();
      });
      setTimeout(function() {
        return window.onpopstate = function() {
          return history.pushState();
        };
      }, 1000);
    }
    if ($("body").hasClass("excharts show") || $("body").hasClass("excharts compare_result")) {
      if ($("body").hasClass("excharts show")) {
        data1_color = "rgba(243, 158, 155, 0.5)";
        data2_color = "rgba(243, 158, 155, 0.5)";
      } else if ($("body").hasClass("excharts compare_result")) {
        data1_color = "rgba(255, 209, 0, .85)";
        data2_color = "rgba(255, 209, 0, 0.35)";
      }
      path_id = $(".title").attr("path_id");
      patterns = gon.patterns;
      ctx = document.getElementById("myChart").getContext("2d");
      original_data1 = JSON.parse(gon.data1);
      original_data2 = JSON.parse(gon.data2);
      data_length = Object.keys(original_data1).length - 1;
      if ($("body").hasClass("excharts compare_result")) {
        cleaned_data = {};
        for (i = j = 0, ref = data_length; j <= ref; i = j += 1) {
          if (original_data2[i] === 0 && original_data1[i] === 1) {
            cleaned_data[i] = 1;
          } else if (original_data2[i] === 1) {
            cleaned_data[i] = 1;
          } else {
            cleaned_data[i] = 0;
          }
        }
        original_data2 = cleaned_data;
      }
      data1 = [];
      data2 = [];
      console.log(original_data1);
      console.log(original_data2);
      for (i = k = 1, ref1 = data_length; k <= ref1; i = k += 3) {
        d1 = original_data1[i] + original_data1[i + 1] + original_data1[i + 2];
        data1.push(d1);
        d2 = original_data2[i] + original_data2[i + 1] + original_data2[i + 2];
        data2.push(d2);
      }
      console.log(data1);
      console.log(data2);
      label = gon.label.split(',');
      options = {
        scale: {
          display: true,
          pointLabels: {
            display: true,
            fontSize: 11
          },
          ticks: {
            stepSize: 1,
            beginAtZero: true,
            display: false,
            max: 3,
            min: 0
          }
        },
        legend: {
          display: false
        },
        animation: false
      };
      myChart = new Chart(ctx, {
        type: 'radar',
        data: {
          labels: label,
          datasets: [
            {
              data: data1,
              pointRadius: 0,
              pointHitRadius: 20,
              backgroundColor: data1_color,
              borderColor: data1_color,
              borderWidth: 1
            }, {
              data: data2,
              pointRadius: 0,
              pointHitRadius: 20,
              backgroundColor: data2_color,
              borderColor: data2_color,
              borderWidth: 1
            }
          ]
        },
        options: options
      });
      $('#myChart').click(function(e) {
        var activePoints, eventPosition, firstPoint, helpers, l, m, mouseX, mouseY, pattern;
        helpers = Chart.helpers;
        eventPosition = helpers.getRelativePosition(e, myChart.chart);
        mouseX = eventPosition.x;
        mouseY = eventPosition.y;
        activePoints = [];
        helpers.each(myChart.scale.ticks, (function(label, index) {
          var exactQuarter, halfLabelsCount, height, labelsCount, pointLabeFont, pointLabeFontFamily, pointLabeFontStyle, pointLabelFontSize, pointLabelPosition, quarterLabelsCount, upperHalf, width, x, y;
          i = this.getValueCount() - 1;
          while (i >= 0) {
            pointLabelPosition = this.getPointPosition(i, this.getDistanceFromCenterForValue(this.options.reverse ? this.min : this.max) + 5);
            pointLabelFontSize = helpers.getValueOrDefault(this.options.pointLabels.fontSize, Chart.defaults.global.defaultFontSize);
            pointLabeFontStyle = helpers.getValueOrDefault(this.options.pointLabels.fontStyle, Chart.defaults.global.defaultFontStyle);
            pointLabeFontFamily = helpers.getValueOrDefault(this.options.pointLabels.fontFamily, Chart.defaults.global.defaultFontFamily);
            pointLabeFont = helpers.fontString(pointLabelFontSize, pointLabeFontStyle, pointLabeFontFamily);
            ctx.font = pointLabeFont;
            labelsCount = this.pointLabels.length;
            halfLabelsCount = this.pointLabels.length / 2;
            quarterLabelsCount = halfLabelsCount / 2;
            upperHalf = i < quarterLabelsCount || i > labelsCount - quarterLabelsCount;
            exactQuarter = i === quarterLabelsCount || i === labelsCount - quarterLabelsCount;
            width = ctx.measureText(this.pointLabels[i]).width + 20;
            height = pointLabelFontSize + 20;
            x = void 0;
            y = void 0;
            if (i === 0 || i === halfLabelsCount) {
              x = pointLabelPosition.x - (width / 2);
            } else if (i < halfLabelsCount) {
              x = pointLabelPosition.x;
            } else {
              x = pointLabelPosition.x - width;
            }
            if (exactQuarter) {
              y = pointLabelPosition.y - (height / 2);
            } else if (upperHalf) {
              y = pointLabelPosition.y - height;
            } else {
              y = pointLabelPosition.y;
            }
            if (mouseY >= y && mouseY <= y + height && mouseX >= x && mouseX <= x + width) {
              activePoints.push({
                index: i,
                label: this.pointLabels[i]
              });
            }
            i--;
          }
        }), myChart.scale);
        firstPoint = activePoints[0];
        if (firstPoint !== void 0) {
          $("#pattern_list").modal();
          $(".js-place-pattern-list").empty();
          if (gon.locale === "ja") {
            for (i = l = 1; l <= 3; i = ++l) {
              pattern = patterns[(firstPoint.index * 3) + i];
              $(".js-place-pattern-list").append('<a href="/patterns/' + pattern.language_id + '/' + pattern.pattern_no + '?path_id=' + path_id + '"><p class="row-space-2">・' + pattern.pattern_name_ja + '</p></a>');
            }
          } else {
            for (i = m = 1; m <= 3; i = ++m) {
              pattern = patterns[(firstPoint.index * 3) + i];
              $(".js-place-pattern-list").append('<a href="/patterns/' + pattern.language_id + '/' + pattern.pattern_no + '?path_id=' + path_id + '"><p class="row-space-2">・' + pattern.pattern_name_en + '</p></a>');
            }
          }
        }
      });
      $(document).on('click', '.js-trigger-switch-proximal', function() {
        $(this).removeClass("in-active");
        $(".js-trigger-switch-current").addClass("in-active");
        $(".proximal-patterns-container").css("display", "block");
        return $(".current-patterns-container").css("display", "none");
      });
      $(document).on('click', '.js-trigger-switch-current', function() {
        $(this).removeClass("in-active");
        $(".js-trigger-switch-proximal").addClass("in-active");
        $(".current-patterns-container").css("display", "block");
        return $(".proximal-patterns-container").css("display", "none");
      });
      $(document).on('click', '.js-trigger-pattern-detail', function() {
        return $.ajax({
          type: 'GET',
          url: '/excharts/' + $(this).attr('language_id') + '/' + $(this).attr('pattern_no') + '/detail'
        }).done(function() {
          var href;
          $('#pattern_detail').modal();
          href = $('.js-link-to-pattern').attr("href");
          href = href + "?path_id=" + path_id;
          return $('#pattern_detail a').attr("href", href);
        });
      });
      $('.js-trigger-add-practice').click(function() {
        var language_id, pattern_no;
        language_id = $(this).attr("language_id");
        pattern_no = $(this).attr("pattern_no");
        $("#practice_language_id").val(language_id);
        $("#practice_pattern_no").val(pattern_no);
        return $('#add-practice').modal();
      });
      Base64toBlob = function(base64) {
        var blob, buf, data, mime, tmp;
        tmp = base64.split(',');
        data = atob(tmp[1]);
        mime = tmp[0].split(':')[1].split(';')[0];
        buf = new Uint8Array(data.length);
        i = 0;
        while (i < data.length) {
          buf[i] = data.charCodeAt(i);
          i++;
        }
        blob = new Blob([buf], {
          type: mime
        });
        return blob;
      };
      imageType = 'image/png';
      fileName = 'sample.png';
      canvas = document.getElementById('myChart');
      base64 = canvas.toDataURL(imageType);
      blob = Base64toBlob(base64);
      $(".chart-image").val(base64);
    }
    if ($("body").hasClass("excharts compare")) {
      array = [];
      changed = false;
      $('.js-set-compare-result').click(function(e) {
        var id, pre;
        e.preventDefault();
        if ($(this).hasClass("selected")) {
          id = $(this).attr("chart_id");
          if ($("#compare_chart_id_1").val() === id) {
            $("#compare_chart_id_1").val("");
          } else if ($("#compare_chart_id_2").val() === id) {
            $("#compare_chart_id_2").val("");
          }
          $(this).removeClass("selected");
        } else {
          id = $(this).attr("chart_id");
          $(this).addClass("selected");
          if ($("#compare_chart_id_1").val() === "") {
            $("#compare_chart_id_1").val(id);
          } else if ($("#compare_chart_id_2").val() !== "" && changed === false) {
            pre = $("#compare_chart_id_1").val();
            $("#card" + pre).removeClass("selected");
            $("#compare_chart_id_1").val(id);
            changed = true;
          } else if ($("#compare_chart_id_2").val() !== "" && changed === true) {
            pre = $("#compare_chart_id_2").val();
            $("#card" + pre).removeClass("selected");
            $("#compare_chart_id_2").val(id);
            changed = false;
          } else {
            $("#compare_chart_id_2").val(id);
          }
        }
        if ($("#compare_chart_id_1").val() !== "" && $("#compare_chart_id_2").val() !== "") {
          return $(".js-compare-submit").show();
        } else {
          return $(".js-compare-submit").hide();
        }
      });
      return $('.js-compare-submit').click(function(e) {
        var id_1, id_2;
        e.preventDefault();
        id_1 = $("#compare_chart_id_1").val();
        id_2 = $("#compare_chart_id_2").val();
        return location.href = "compare/result?chart_id_1=" + id_1 + "&chart_id_2=" + id_2;
      });
    }
  });

}).call(this);
